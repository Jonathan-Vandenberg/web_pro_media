// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String         @id @default(uuid())
  name          String?
  email         String?
  phone         String?
  timeline      Timeline?
  functionality Functionality?
  project       Project?
}

model Project {
  id              String          @id @default(uuid())
  projectName     String
  status          Status          @default(NOT_STARTED)
  startDate       String?
  endDate         String?
  image           String?
  map             Map?
  photoGallery    PhotoGallery?
  blog            Blog?
  websiteType     WebsiteType     @default(ECOMMERCE_WEBSITE)
  websiteCategory WebsiteCategory @default(AUTOMOTIVE)

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @unique
}

model Functionality {
  id                    String  @unique @default(uuid())
  calenderRequire       Boolean @default(false)
  chatPopupRequire      Boolean @default(false)
  contactFormRequire    Boolean @default(false)
  emailMarketingRequire Boolean @default(false)
  photoGalleryRequire   Boolean @default(false)
  productCatalogRequire Boolean @default(false)
  productSearchRequire  Boolean @default(false)
  videoGalleryRequire   Boolean @default(false)
  apiRequire            Boolean @default(false)
  otherRequire          String?
  mapRequire            Boolean
  blogRequire           Boolean
  blogCommentsRequire   Boolean
  blogPostsRequire      Boolean

  customer          Customer @relation(fields: [customerIdRequire], references: [id], onDelete: Cascade)
  customerIdRequire String   @unique

}

model Timeline {
  id                     String                  @id @default(uuid())
  clarify                Clarify?
  functionalityTimeline  FunctionalityTimeline?
  layout                 Layout?
  tools                  Tools?
  implementFunctionality ImplementFunctionality?
  implementDesign        ImplementDesign?
  review                 Review?
  alterations            Alterations?
  testing                Testing?
  deploy                 Deploy?

  Customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @unique
}

model Clarify {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model FunctionalityTimeline {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Layout {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Tools {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model ImplementFunctionality {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model ImplementDesign {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Review {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Alterations {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Testing {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Deploy {
  id     String @id @default(uuid())
  name   String
  status Status @default(NOT_STARTED)

  timeline   Timeline @relation(fields: [timelineId], references: [id])
  timelineId String   @unique
}

model Map {
  id        String  @id @default(uuid())
  status    Status? @default(NOT_STARTED)
  name      String? @default("Map")
  required  Boolean @default(false)
  price     Int?
  notes     String?
  startDate String?
  endDate   String?

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PhotoGallery {
  id        String  @id @default(uuid())
  status    Status? @default(NOT_STARTED)
  name      String? @default("Photo Gallery")
  required  Boolean @default(false)
  price     Int?
  notes     String?
  startDate String?
  endDate   String?
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Blog {
  id             String   @id @default(uuid())
  status         Status?  @default(NOT_STARTED)
  name           String?  @default("Blog")
  required       Boolean  @default(false)
  price          Int?
  notes          String?
  startDate      String?
  endDate        String?
  commentSection Boolean?
  socialSharing  Boolean?

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Card {
  projectName String  @unique
  status      String
  image       String?
  customerID  String?
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum WebsiteType {
  ECOMMERCE_WEBSITE
  BUSINESS_WEBSITE
  BLOG_WEBSITE
  PORTFOLIO_WEBSITE
  EVENT_WEBSITE
  PERSONAL_WEBSITE
  MEMBERSHIP_WEBSITE
  NONPROFIT_WEBSITE
  INFORMATIONAL_WEBSITE
  ONLINE_FORUM
  OTHER
}

enum WebsiteCategory {
  AUTOMOTIVE
  BUSINESS_SUPPORT_AND_SUPPLIES
  COMPUTERS_AND_ELECTRONICS
  CONTRUCTION_AND_CONTRACTING
  EDUCATION
  ENTERTAINMENT
  FOOD_AND_DINING
  HEALTH_AND_MEDICINE
  HOME_AND_GARDEN
  LEGAl_AND_FINANCIAL
  MANUFACTURING_WHOLESALE_AND_DISTRIBUTION
  MERCHANTS_AND_RETAIL
  PERSONAL_CARE_AND_SERVICES
  REAL_ESTATE
  TRAVEL_AND_TRANSPORTATION
  OTHER
}
